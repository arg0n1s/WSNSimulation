import "platform:resource/WSNSimulationModel/model/wsnSimulationModel.ecore"
import "http://www.eclipse.org/emf/2002/Ecore"


rule markUnknownLinks() {
	l : Link {
		.linkState == enum::UNKNOWN
		.linkState := enum::INACTIVE
	}
}

rule deleteLinks() {
	-- l : Link {
		.linkState == enum::DELETED
	}
}

abstract pattern findTriangle(currentNode : EString ) {
	l1 : Link {
		-wsnNodes->n1
		-wsnNodes->n2
	}
	
	l2 : Link {
		-wsnNodes->n2
		-wsnNodes->n3
	}
	
	l3 : Link {
		-wsnNodes->n1
		-wsnNodes->n3
	}
	
	n1 : WSNNode {
		.name == param::currentNode
	}
	
	n2 : WSNNode {
		
	}
	
	n3 : WSNNode {
		
	}
}

rule repair() refines findTriangle{
	l1 : Link {
		.linkState == enum::INACTIVE
		.linkState := enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::INACTIVE
		.linkState := enum::ACTIVE
	}
	
	l3 : Link {
		.linkState == enum::DELETED
	}
}

rule repair2() refines findTriangle{
	l1 : Link {
		.linkState == enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::INACTIVE
		.linkState := enum::ACTIVE
	}
	
	l3 : Link {
		.linkState == enum::DELETED
	}
}

rule repair3() refines findTriangle{
	l1 : Link {
		.linkState == enum::INACTIVE
		.linkState := enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::ACTIVE
	}
	
	l3 : Link {
		.linkState == enum::DELETED
	}
}

pattern findWeightMaximal() refines findTriangle{
	l1 : Link {
	}
	
	l2 : Link {
	}
	
	l3 : Link {
		.cost >= l1.cost
		.cost >= l2.cost
	}
}

condition isWeightMaximal = enforce findWeightMaximal
condition isNotWeightMaximal = forbid findWeightMaximal

rule shutdownIsMaximal() refines findTriangle {
	l1 : Link {
		.linkState == enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::ACTIVE
	}
	
	l3 : Link {
		.linkState == enum::ACTIVE
		.linkState := enum::INACTIVE
	}
} when isWeightMaximal

rule powerupNotMaximal() refines findTriangle {
	l1 : Link {
		.linkState == enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::ACTIVE
	}
	
	l3 : Link {
		.linkState := enum::ACTIVE
		.linkState == enum::INACTIVE
	}
} when isNotWeightMaximal

rule powerupIsMaximalButK() refines findTriangle {
	l1 : Link {
		.linkState == enum::ACTIVE
	}
	
	l2 : Link {
		.linkState == enum::ACTIVE
	}
	
	l3 : Link {
		.linkState := enum::ACTIVE
		.linkState == enum::INACTIVE
	}
} when isWeightMaximal
